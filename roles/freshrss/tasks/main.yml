---
- name: Download FreshRSS using Git
  git:
    repo: 'https://github.com/FreshRSS/FreshRSS.git'
    dest: '{{ install_path }}'
    depth: 1

- name: Install PHP dependencies
  apt:
    pkg: '{{ packages }}'
    state: latest

# -----------------------------------------------------------------------------
# Nginx
# -----------------------------------------------------------------------------

- name: Install Nginx web server
  apt:
    pkg: nginx
    state: latest

- name: Link the exposed folder from FreshRSS into the web root
  file:
    src: '{{ install_path }}/p'
    dest: '{{ web_root_folder }}/p'
    state: link

- name: Set data directory tree readable by owner and group
  file:
    path: '{{ install_path }}/data'
    owner: www-data
    group: www-data
    mode: u=rwX,g=rX,o=
    recurse: yes

- name: Generate nginx configuration
  template:
    src: freshrss_nginx.conf.j2
    dest: /etc/nginx/sites-available/freshrss
  notify: Restart nginx

- name: Disable default nginx configuration
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: Restart nginx

- name: Enable nginx configuration
  file:
    src: /etc/nginx/sites-available/freshrss
    dest: /etc/nginx/sites-enabled/freshrss
    state: link
  notify: Restart nginx

# -----------------------------------------------------------------------------
# Postgresql
# -----------------------------------------------------------------------------

- name: Install PostgreSQL database server
  apt:
    pkg:
      - postgresql
      - python3-psycopg2
    state: latest

- name: Generate and announce random password
  debug:
    msg: "Password is {{ lookup('password', '/tmp/passwordfile length=24') }}"

- name: Create PostgreSQL user
  become: true
  become_user: postgres
  postgresql_user:
    name: freshrss
    password: "{{ lookup('password', '/tmp/passwordfile length=24') }}"
    role_attr_flags: CREATEDB,NOSUPERUSER
  no_log: True

- name: Create PostgreSQL database
  become: true
  become_user: postgres
  postgresql_db:
    name: freshrss
    owner: freshrss

- name: Stop Playbook
  fail:
    msg: Ignore rest of the playbook

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- name: process installation
  shell: "umask u=rwx,g=rx,o= && {{ install_path }}/cli/do-install.php --default_user {{ _freshrss.end_user.login }} --language {{ _freshrss.locale }} --api_enabled --db-type sqlite"
  args:
    removes: "{{ data_path }}/do-install.txt"
  become: yes
  become_user: www-data

- name: check if the user exists
  command: "{{ install_path }}/cli/user-info.php -h --user {{ _freshrss.end_user.login }}"
  register: freshrss_user_data
  changed_when: freshrss_user_data.rc > 1
  failed_when: freshrss_user_data.rc > 1
  become: yes
  become_user: www-data

# use shell task and umask workaround to set correct umask on generated files and directories
- name: create user
  shell: "umask u=rwx,g=rx,o= && {{ install_path }}/cli/create-user.php --user {{ _freshrss.end_user.login }} --password '{{ _freshrss.end_user.password }}' --api_password '{{ _freshrss.end_user.password }}' --language {{ _freshrss.locale }} --email {{ _freshrss.end_user.email }} --token {{ _freshrss.token }}"
  when: freshrss_user_data.rc == 1
  become: yes
  become_user: www-data

# use umask workaround to set correct umask on generated files and directories
- name: create a cron job
  cron:
    name: freshrss cron job
    cron_file: freshrss
    user: www-data
    minute: 0
    job: umask u=rwx,g=rx,o= && php -f {{ install_path }}/app/actualize_script.php > /tmp/freshrss.log 2>&1
    state: present
  become: yes

